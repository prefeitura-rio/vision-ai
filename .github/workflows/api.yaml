name: API

on:
  push:
    paths:
      - ".github/workflows/api*"
      - "projects/api/**/*"
      - "libs/base/**/*"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11.x"

      - name: Set up dependencies
        run: |
          cd projects/api/
          pip install -U pip poetry
          poetry config virtualenvs.create false
          poetry install --with dev

      - name: Run linters
        run: |
          cd projects/api/
          task lint

  tests:
    name: Test
    runs-on: ubuntu-latest
    container: python:3.11-slim
    env:
      INFISICAL_ADDRESS: ${{ secrets.INFISICAL_ADDRESS }}
      INFISICAL_TOKEN: ${{ secrets.INFISICAL_TOKEN }}
      TEST_CLIENT_ID: ${{ secrets.TEST_CLIENT_ID }}
      TEST_CLIENT_SECRET: ${{ secrets.TEST_CLIENT_SECRET }}
      TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      TEST_TOKEN_URL: ${{ secrets.TEST_TOKEN_URL }}
      TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up dependencies
        run: |
          cd projects/api/
          pip install -U pip poetry
          poetry config virtualenvs.create false
          poetry install --with dev

      - name: Set up database
        run: |
          cd projects/api/
          aerich init-db || true
          aerich upgrade || true

      - name: Run tests
        run: |
          cd projects/api/
          task test

  deploy:
    name: Build and Deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development'
    needs: [lint, tests]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      DOCKERHUB_REPOSITORY: vision-ai
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DOCKERHUB_USERNAME: prefeiturario
      GCP_PROJECT_ID: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_GCP_PROJECT_ID || secrets.STAGING_GCP_PROJECT_ID }}
      GCP_SA_KEY: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_GCP_SA_KEY || secrets.STAGING_GCP_SA_KEY }}
      GCR_SERVICE: vision-ai
      GCR_REGION: us-central1

    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'API (Production)' || 'API (Staging)' }}
      url: ${{ github.ref == 'refs/heads/main' && 'https://api.vision-ai.dados.rio/' || 'https://staging-api.vision-ai.dados.rio/' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Remove soft link and copy libs to API directory
        run: |
          rm projects/api/libs
          mkdir -p projects/api/libs
          cp -r libs/* projects/api/libs/

      - name: Docker Auth
        id: docker-auth
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v2
        with:
          context: ./projects/api
          file: ./projects/api/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPOSITORY }}:${{ github.sha }}
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPOSITORY }}:latest
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ env.GCP_SA_KEY }}'

      - name: Deploy to Google Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.GCR_SERVICE }}-api
          region: ${{ env.GCR_REGION }}
          image: docker.io/${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPOSITORY }}:${{ github.sha }}
          flags: '--add-cloudsql-instances=datario:us-central1:postgres-side --port=80 --allow-unauthenticated --concurrency=100 --verbosity=debug'
          secrets: |
            ENVIRONMENT=VISION_AI_API_ENVIRONMENT:latest
            INFISICAL_ADDRESS=VISION_AI_API_INFISICAL_ADDRESS:latest
            INFISICAL_TOKEN=VISION_AI_API_INFISICAL_TOKEN:latest
